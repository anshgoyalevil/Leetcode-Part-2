class Solution {
    int[] size;
    int[] parent;

    public int findPar(int x) {
        if(x == parent[x]){
            return x;
        }
        return parent[x] = findPar(parent[x]);
    }

    public void union(int u, int v) {
        if (size[u] >= size[v]) {
            parent[v] = u;
            size[u] += size[v];
        } else {
            parent[u] = v;
            size[v] += size[u];
        }
    }

    public int minMalwareSpread(int[][] graph, int[] init) {
        int n = graph.length;

        size = new int[n];
        parent = new int[n];

        for (int i = 0; i < n; i++) {
            size[i] = 1;
            parent[i] = i;
        }

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (graph[i][j] == 1) {
                    int u = findPar(i);
                    int v = findPar(j);
                    if (u != v) {
                        union(u, v);
                    }
                }
            }
        }
        
        int[] infectedNodesInGroup = new int[n];
        for(int node: init) {
            int parent = findPar(node);
            infectedNodesInGroup[parent]++;
        }

        Arrays.sort(init);

        int maxSpreadNode = init[0], maxSpreadSize = 0; 
        for(int node: init) {
            int parent = findPar(node);
            if(infectedNodesInGroup[parent] == 1 && size[parent] > maxSpreadSize) {
                maxSpreadNode = node;
                maxSpreadSize = size[parent];
            } 
        }
        return maxSpreadNode;
        
    }
}
